function [objective, constraints] = svm_objective_function(x, ...
                                  class_imbalance_weights, cv_param,...
                                  data_label, data_inst)

                              class_imbalance_weights = [1.0,1.0,1.0];
w1 = class_imbalance_weights(1);
w2 = class_imbalance_weights(2);
w3 = class_imbalance_weights(3);                           

order = [1 2 3];
% splitting the data for k-fold crossvalidation
c = cvpartition(data_label,'KFold',cv_param);
% evaluation function for crossvalidated confusion matrix
f_eval = @(xtr,ytr,xte,yte)confusionmat(yte,...
                                      svm_classify(x,xte,yte,xtr,ytr),'order',order);

old_folder = pwd;

cd(old_folder)
cfMat = crossval(f_eval,data_inst,data_label,'partition',c);
cfMat = reshape(sum(cfMat),3,3);
% accuracy
accuracy = trace(cfMat)/(sum(sum(cfMat)));
% sensitivity for each class
sens_gait = cfMat(1,1)/sum(cfMat(1,:));
sens_fog = cfMat(2,2)/sum(cfMat(2,:));
sens_prefog = cfMat(3,3)/sum(cfMat(3,:));
% specificity for each class
spec_gait = cfMat(1,1)/sum(cfMat(:,1));
spec_fog = cfMat(2,2)/sum(cfMat(:,2));
spec_prefog = cfMat(3,3)/sum(cfMat(:,3));

% objective function value is minimized, hence maximizing accuracy 
objective = -accuracy;
% forming the coupled constraints
% initially all constraints violated
% all constraints are satisfied if all sensitivities and specificities are
% at least 75 %
constraints = ones(6);

if(sens_gait>0.75)
    constraints(1) = -1;
end

if(sens_fog>0.75)
    constraints(2) = -1;
end

if(sens_prefog>0.75)
    constraints(3) = -1;
end

if(s_gait>0.75)
    constraints(1) = -1;
end

if(sens_gait>0.75)
    constraints(1) = -1;
end

if(sens_gait>0.75)
    constraints(1) = -1;
end

end


% % initializing class imbalance weights, actual values TO BE DETERMINED
% class_imbalance_weights = [1.0,1.0,1.0];
% w1 = class_imbalance_weights(1);
% w2 = class_imbalance_weights(2);
% w3 = class_imbalance_weights(3);
% 
%                               
% % building the string of parameters 
% model_params = "-c " + string(x.box) + " -g " + string(x.gamma) + " -v " + string(cv_param);
% model_params = model_params + " -w1 " + string(w1) + " -w2 " + string(w2);
% model_params = model_params + " -w3 " + string(w3) + " -b 1";
% % conversion to char array
% model_params = char(model_params);
% 
% % changing folder in order to use LIBSVM
% old_folder = pwd;
% cd ../../libsvm-3.23/matlab/
% % minus sign for bayesian optimization
% objective =  - svmtrain(data_label, data_inst, model_params);
% % think of a constraint
% % maybe number of support vectors, but for that you need the model
% % constraint = -1;
% cd(old_folder)